App.tsx:

import { useEffect, useState } from 'react';
import { AppRoot } from '@telegram-apps/telegram-ui';
import { AnimatePresence, motion } from 'framer-motion';
import { Navigate, Route, Routes, useLocation, matchPath } from 'react-router-dom';
import { routes } from '../navigation/routes';
import { BottomNavigation } from './BottomNavigation/BottomNavigation';
import { ProtectedRoute } from './ProtectedRoute';

export function App() {
  const [isRegistered, setIsRegistered] = useState(!!localStorage.getItem('userId'));
  const location = useLocation();

  useEffect(() => {
    setIsRegistered(!!localStorage.getItem('userId'));
  }, [location]);

  const pageVariants = {
    initial: { opacity: 0, y: 50 },
    in: { opacity: 1, y: 0 },
    out: { opacity: 0, y: -50 }
  };

  const pageTransition = {
    type: 'tween',
    ease: 'anticipate',
    duration: 0.5
  };

  const showBottomNav = !matchPath('/note/:id', location.pathname);

  return (
    <AppRoot>
      <AnimatePresence mode="wait">
        <Routes location={location} key={location.pathname}>
          {routes.map((route) => (
            <Route
              key={route.path}
              path={route.path}
              element={
                <motion.div
                  initial="initial"
                  animate="in"
                  exit="out"
                  variants={pageVariants}
                  transition={pageTransition}
                  className="page-wrapper"
                >
                  {route.path === '/index' || route.path === '/settings' ? (
                    <ProtectedRoute isRegistered={isRegistered}>
                      <route.Component />
                    </ProtectedRoute>
                  ) : (
                    <route.Component />
                  )}
                </motion.div>
              }
            />
          ))}
          <Route path="*" element={<Navigate to="/" />} />
        </Routes>
      </AnimatePresence>
      {isRegistered && location.pathname !== '/' && showBottomNav && <BottomNavigation />}
    </AppRoot>
  );
}

ProtectedRoute.tsx:

import { FC } from 'react';
import { Navigate } from 'react-router-dom';

interface ProtectedRouteProps {
  isRegistered: boolean;
  children: React.ReactNode;
}

export const ProtectedRoute: FC<ProtectedRouteProps> = ({ isRegistered, children }) => {
  if (!isRegistered) {
    return <Navigate to="/" replace />;
  }
  return <>{children}</>;
};

Root.tsx:

import { App } from './App';
import { ErrorBoundary } from './ErrorBoundary.tsx';
import { HashRouter } from 'react-router-dom'; 

function ErrorBoundaryError({ error }: { error: unknown }) {
  return (
    <div>
      <p>An unhandled error occurred:</p>
      <blockquote>
        <code>
          {error instanceof Error
            ? error.message
            : typeof error === 'string'
              ? error
              : JSON.stringify(error)}
        </code>
      </blockquote>
    </div>
  );
}

export function Root() {
  return (
    <ErrorBoundary fallback={ErrorBoundaryError}>
        <HashRouter>
          <App />
        </HashRouter>
    </ErrorBoundary>
  );
}

LoadingOverlay.tsx:

import { FC } from 'react';
import styles from './LoadingOverlay.module.scss';
import LoaderSpinner from '../../assets/spinner.svg';

export const LoadingOverlay: FC = () => (
  <div className={styles['loading-overlay']}>
     <img src={LoaderSpinner} alt="Loader" />
  </div>
);

StartPage.tsx:

import { FC, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { initData, useSignal } from '@telegram-apps/sdk-react';
import { LoadingOverlay } from '../../components/LoadingOverlay/LoadingOverlay';
import styles from './Startpage.module.scss';

export const StartPage: FC = () => {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const initDataState = useSignal(initData.state);

  const handleStartClick = () => {
    setLoading(true);
    const user = initDataState?.user;
    if (user) {
      localStorage.setItem('userId', user.id.toString());

      setTimeout(() => {
        setLoading(false);
        navigate('/index');
      }, 200000);
    }
  };

  useEffect(() => {
    if (localStorage.getItem('userId')) {
      navigate('/index');
    }
  }, [navigate]);

  if (loading) {
    return <LoadingOverlay />;
  }

  return (
    <div className={styles['start-page-layout']}>
      <div className={styles['start-page-content-container']}>
        <h1 className={styles['name']}>Notelytic</h1>
        <p>Welcome! Your personal AI-powered note-taking assistant. Create content and get inspiration with AI assistance!</p>
      </div>
      <button onClick={handleStartClick} className={styles['get-started-button']}>
        Get Started
      </button>
    </div>
  );
};

IndexPage.tsx:

import React, { FC, useEffect, useState, useMemo, useCallback, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { initData, useSignal } from '@telegram-apps/sdk-react';
import { Search, Plus } from 'lucide-react';
import { Page } from '../../components/Page';
import { NoteItem } from '@/components/NoteItem/NoteItem';
import styles from './IndexPage.module.scss';
import { useTranslation } from 'react-i18next';

const INTRO_NOTE_ID = '1';
const INTRO_NOTE = {
  title: "Welcome to Notelytic! Unlock the Power of AI in Note-Taking",
  content: "Welcome to Notelytic, your personal AI-powered note-taking assistant! ðŸŒŸ\n\n" +
           "With Notelytic, you can:\n\n" +
           "âœ¨ **Create or Edit Notes with AI Assistance**\nGet inspired and let AI help you write or refine your thoughts.\n\n" +
           "ðŸŽ¨ **Choose Custom Themes**\nPersonalize your notes with beautiful themes that suit your style.\n\n" +
           "ðŸ“… **Organize Effortlessly**\nEfficiently categorize and find your notes, so you never lose track.\n\n" +
           "Get started now and unlock a new level of productivity and creativity with Notelytic!"
};

const getNotes = () => {
  const savedNotes = localStorage.getItem('notes');
  return savedNotes ? JSON.parse(savedNotes) : {};
};

const saveNotesToLocalStorage = (notes: Record<string, { title: string; content: string; isPinned?: boolean }>) => {
  localStorage.setItem('notes', JSON.stringify(notes));
};

export const IndexPage: FC = () => {
  const navigate = useNavigate();
  const initDataState = useSignal(initData.state);
  const { t } = useTranslation();
  const user = initDataState?.user;

  const [notes, setNotes] = useState<Record<string, { title: string; content: string; isPinned?: boolean }>>({});
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [isScrolled, setIsScrolled] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setLoading(true);
    
    const loadNotes = () => {
      const existingNotes = getNotes();
      if (!existingNotes[INTRO_NOTE_ID]) {
        existingNotes[INTRO_NOTE_ID] = INTRO_NOTE;
        saveNotesToLocalStorage(existingNotes);
      }
      const sortedNotes = Object.entries(existingNotes).sort(([, a], [, b]) => {
        const noteA = a as { title: string; content: string; isPinned?: boolean };
        const noteB = b as { title: string; content: string; isPinned?: boolean };
        return (noteB.isPinned ? 1 : 0) - (noteA.isPinned ? 1 : 0);
      });
      setNotes(Object.fromEntries(sortedNotes) as Record<string, { title: string; content: string; isPinned?: boolean }>);
      setLoading(false);
    };

    loadNotes();

    const handleStorageChange = () => {
      loadNotes();
    };

    window.addEventListener('storage', handleStorageChange);
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      const scrollContainer = scrollContainerRef.current;
      const searchPosition = searchRef.current?.offsetTop || 0;
      if (scrollContainer) {
        setIsScrolled(scrollContainer.scrollTop > searchPosition);
      }
    };

    const scrollContainer = scrollContainerRef.current;
    scrollContainer?.addEventListener('scroll', handleScroll);
    return () => scrollContainer?.removeEventListener('scroll', handleScroll);
  }, []);

  const handleSearch = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  }, []);

  const filteredNotes = useMemo(() => {
    const lowerSearchTerm = searchTerm.toLowerCase();
    return Object.entries(notes).filter(([, note]) =>
      note.title.toLowerCase().includes(lowerSearchTerm) ||
      note.content.toLowerCase().includes(lowerSearchTerm)
    );
  }, [notes, searchTerm]);

  const displayName = user?.firstName && user?.lastName 
    ? `${user.firstName} ${user.lastName}` 
    : user?.username ? `@${user.username}` : 'User';

  const handleAddNoteClick = () => {
    navigate('/note/new');
  };

  if (loading) {
    return (
      <Page back={false}>
        <div className={styles.loadingContainer}>
          <p>{t('LoadingNotes')}</p>
        </div>
      </Page>
    );
  }

  return (
    <Page back={false}>
      <header className={`${styles.homeHeader} ${isScrolled ? styles.homeHeaderScrolled : ''}`}>
        <div className={styles.homeHeaderRowContainer}>
          <div className={styles.homeHeaderRow}>
            <span>{displayName}</span>
          </div>
          <div className={styles.homeHeaderRow}>
            <p>FREMIUM</p>
          </div>
        </div>
      </header>
      <div
        ref={searchRef}
        className={styles.searchContainer}
      >
        <input
          type="text"
          placeholder={t('SearchNotes')}
          className={styles.searchInput}
          value={searchTerm}
          onChange={handleSearch}
        />
        <Search color='var(--wht)' size={25} strokeWidth={1.8}/>
      </div>
      <div ref={scrollContainerRef} className={styles.scrollContainer}>
        <div className={styles.notesList}>
          {filteredNotes.map(([id, note]) => (
            <MemoizedNoteItem
              key={id}
              title={note.title}
              content={note.content}
              id={parseInt(id)}
            />
          ))}
        </div>
      </div>
      <button className={styles.addButton} onClick={handleAddNoteClick}>
        <Plus color='var(--blck)' size={28} />
      </button>
    </Page>
  );
};

const MemoizedNoteItem = React.memo(NoteItem);